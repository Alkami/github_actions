env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  workflow_call:

jobs:
  build:
    name: Link Jira - Reusable
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Print Command Summary
        run: |
          echo "
          Links Pull Request to Jira Ticket
           
          1. Cycles through commit messages on PR and pulls out Jira Tickets
          2. Links the PR to the Jira tickets so that it is in the jira ticket links
          "

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      # Get commit messages and store them to the environment variable
      - name: Get Commit Message Tickets
        run: |
          MSG=$(git log origin/${{ github.event.pull_request.base.ref }}..)
          echo "github.event.after: ${{ github.event.after }}"
          echo "MSG: $MSG"
          
          PATTERN=DEV-[X0-9].*
          JIRA_ISSUES=""
          for word in $MSG; do
          if [[ $word =~ $PATTERN ]]; then
            echo "found a match on $word"
            JIRA_ISSUES+=" $BASH_REMATCH"
          fi
          done

          if [ -z "$JIRA_ISSUES" ]; then
            echo "ERROR: No valid Jira issue found. You must include a Jira issue in the comments of your commit."
            exit 1
          fi
          
          echo "JIRALINK"
          echo "JIRA_ISSUES: $JIRA_ISSUES"
          echo "JIRA_ISSUES=${JIRA_ISSUES}" >> $GITHUB_ENV
          
      # Runs a set of commands using the runners shell
      - name: "link-ticket"
        run: |
          #  LINK PR TO JIRA TICKET #
          #  Once this is in production, add personal access token to the repository with name JIRA_TOKEN
          #  https://docs.github.com/en/actions/reference/encrypted-secrets
          #  Example syntax for accessing secrets
          #  https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepsenv
                    
          echo "COMMIT_MESSAGES: ${{env.COMMIT_MESSAGES}}"
          
          echo "Target Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Source Branch: ${{ github.event.pull_request.head.ref }}"
          
          BASE_URL=https://jira.alkami.com/rest/api/2
          #BASE_URL=https://staging2.orb.alkamitech.com/rest/api/2
          
          #  Split the github ref to get the PR number
          REF_ARRAY=($(echo $GITHUB_REF | tr '/' ' '))
          LEN=${#REF_ARRAY[@]}
          PR_NUM=${REF_ARRAY[LEN-2]}
          echo Extracting PR number from #GITHUB_REF ... ${PR_NUM}
          PR_URL=https://github.com/${{ github.repository }}/pull/${PR_NUM}
          echo "PR_URL: $PR_URL"
          
          #  Parse the Jira issue from the branch name by matching "DEV-"
          #BRANCH=${GITHUB_HEAD_REF}
          PATTERN=[a-zA-Z0-9,\.\_\-]+-[X0-9]+
          
          echo "env.JIRA_ISSUES: ${{env.COMMIT_MESSAGES}}"
          
          for word in ${{env.JIRA_ISSUES}}; do
            echo "Looking at word: $word"
            if [[ $word =~ $PATTERN ]]; then
              echo "found a match"
              ISSUE=$BASH_REMATCH
              echo Attempting to post link to issue: $ISSUE

              echo Repository name: $GITHUB_REPOSITORY
              
          # Script indentation requires EOF calls to be at the beginning
          # of the line with no whitespace preceding, so leave this poorly indented
          # and also note the "beginning" of the line is the "run" block above as this
          # block gets transpiled from yaml to shellscript
          generate_post_data()
          {
          cat <<EOF
          {
            "globalId": "${ISSUE}_${PR_NUM}",
            "object": {
                "url": "$PR_URL",
                "title": "PR #$PR_NUM in $GITHUB_REPOSITORY",
                "summary": "Submitted by ${{ github.actor }}",
                "icon": {
                    "url16x16": "https://cdn4.iconfinder.com/data/icons/iconsimple-logotypes/512/github-512.png",
                    "title": "GitHub"
                }
            }
          }
          EOF
          }
              
              JIRA_LINK_URL=$BASE_URL/issue/$ISSUE/remotelink
              echo POSTING to $JIRA_LINK_URL
              echo $(generate_post_data)
              JIRA_RESPONSE=$(curl --location --request POST "$JIRA_LINK_URL" \
                --header "Accept: application/json" \
                --header "Content-Type: application/json" \
                --header "Authorization: Bearer ${{ secrets.JIRA_TOKEN }}" \
                --data "$(generate_post_data)")
              
              echo "JIRA_RESPONSE: $JIRA_RESPONSE"
              if [[ $JIRA_RESPONSE == *"errorMessages"* ]]; then
                if [[ $JIRA_RESPONSE == *"Issue Does Not Exist"* ]]; then
                  if [[ $ISSUE == *"DEV-1234"* ]]; then
                    echo "JIRA ticket override detected, bypassing JIRA link requirement"
                  else
                    echo "Issue $ISSUE was not found on JIRA, if this was intentional, use ticket number DEV-1234 to bypass this check"
                    exit 1
                  fi
                else
                  echo "Error linking JIRA ticket: $JIRA_RESPONSE"
                  exit 1
                fi
              fi
            fi
          done
